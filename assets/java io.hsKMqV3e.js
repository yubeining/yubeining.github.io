import{_ as b}from"./ValaxyMain.vue_vue_type_style_index_0_lang.DXFDIcRI.js";import{f as m,a as k,u as f}from"./chunks/vue-router.CE6eJGTm.js";import{O as _,a4 as e,V as r,U as l,X as a,u as v,P,A as x}from"./framework.CgPPQfmH.js";import"./app.2Hk-Pb-P.js";import"./chunks/dayjs.CCYrSalk.js";import"./chunks/vue-i18n.BoM8szIi.js";import"./chunks/pinia.BjFmakTL.js";import"./chunks/@vueuse/motion.Cp--YhDB.js";import"./chunks/nprogress.BahbDzmd.js";import"./YunComment.vue_vue_type_style_index_0_lang.DC8N30BB.js";import"./index.C5okkQwF.js";import"./YunPageHeader.vue_vue_type_script_setup_true_lang.PEAAi8W5.js";import"./post.CGlAV6UI.js";const y=m("/posts/study notes/java base knowledge/java io",async o=>JSON.parse('{"title":"java io","description":"","frontmatter":{"title":"java io","date":"2025-04-19","updated":"2025-04-19","categories":"java","tags":["java","笔记"],"top":1},"headers":[{"level":3,"title":"1、NIO、BIO、AIO","slug":"_1、nio、bio、aio","link":"#_1、nio、bio、aio","children":[]},{"level":3,"title":"AIO","slug":"aio","link":"#aio","children":[]},{"level":3,"title":"2、IO多路复用机制","slug":"_2、io多路复用机制","link":"#_2、io多路复用机制","children":[]},{"level":3,"title":"3、启动线程的方式","slug":"_3、启动线程的方式","link":"#_3、启动线程的方式","children":[]},{"level":3,"title":"4、幂等性&如何保证","slug":"_4、幂等性-如何保证","link":"#_4、幂等性-如何保证","children":[]},{"level":3,"title":"5、多线程的状态","slug":"_5、多线程的状态","link":"#_5、多线程的状态","children":[]},{"level":3,"title":"6、实现线程同步的方式","slug":"_6、实现线程同步的方式","link":"#_6、实现线程同步的方式","children":[]},{"level":3,"title":"7、volatile关键字作用","slug":"_7、volatile关键字作用","link":"#_7、volatile关键字作用","children":[]},{"level":3,"title":"8、线程","slug":"_8、线程","link":"#_8、线程","children":[]},{"level":3,"title":"9、synchronized关键字","slug":"_9、synchronized关键字","link":"#_9、synchronized关键字","children":[]},{"level":3,"title":"10、线程池","slug":"_10、线程池","link":"#_10、线程池","children":[]},{"level":3,"title":"11、threadlocal","slug":"_11、threadlocal","link":"#_11、threadlocal","children":[]},{"level":3,"title":"12、MVCC-多版本并发控制","slug":"_12、mvcc-多版本并发控制","link":"#_12、mvcc-多版本并发控制","children":[]},{"level":3,"title":"13、IO流的分类","slug":"_13、io流的分类","link":"#_13、io流的分类","children":[]},{"level":3,"title":"14、死锁产生的必要条件","slug":"_14、死锁产生的必要条件","link":"#_14、死锁产生的必要条件","children":[]},{"level":3,"title":"15、介绍一下几种典型的锁","slug":"_15、介绍一下几种典型的锁","link":"#_15、介绍一下几种典型的锁","children":[]},{"level":3,"title":"16、同步锁和分段锁","slug":"_16、同步锁和分段锁","link":"#_16、同步锁和分段锁","children":[]},{"level":3,"title":"17、乐观锁","slug":"_17、乐观锁","link":"#_17、乐观锁","children":[]},{"level":3,"title":"18、悲观锁","slug":"_18、悲观锁","link":"#_18、悲观锁","children":[]},{"level":3,"title":"19、信号量semaphore的理解","slug":"_19、信号量semaphore的理解","link":"#_19、信号量semaphore的理解","children":[]},{"level":3,"title":"20、lock","slug":"_20、lock","link":"#_20、lock","children":[]},{"level":3,"title":"21、内存泄漏","slug":"_21、内存泄漏","link":"#_21、内存泄漏","children":[]}],"relativePath":"pages/posts/study notes/java base knowledge/java io.md","lastUpdated":1745542762000}'),{lazy:(o,t)=>o.name===t.name}),V={__name:"java io",setup(o,{expose:t}){var s;const{data:h}=y(),u=f(),d=k(),i=Object.assign(d.meta.frontmatter||{},((s=h.value)==null?void 0:s.frontmatter)||{});return d.meta.frontmatter=i,u.currentRoute.value.data=h.value,x("valaxy:frontmatter",i),globalThis.$frontmatter=i,t({frontmatter:{title:"java io",date:"2025-04-19",updated:"2025-04-19",categories:"java",tags:["java","笔记"],top:1}}),(n,c)=>{const p=b;return P(),_(p,{frontmatter:v(i)},{"main-content-md":e(()=>c[0]||(c[0]=[l("h1",{id:"java-io-线程-并发",tabindex:"-1"},[a("Java IO 线程 并发 "),l("a",{class:"header-anchor",href:"#java-io-线程-并发","aria-label":'Permalink to "Java IO 线程 并发"'},"​")],-1),l("h3",{id:"_1、nio、bio、aio",tabindex:"-1"},[a("1、NIO、BIO、AIO "),l("a",{class:"header-anchor",href:"#_1、nio、bio、aio","aria-label":'Permalink to "1、NIO、BIO、AIO"'},"​")],-1),l("h4",{id:"bio-blocking",tabindex:"-1"},[a("BIO blocking "),l("a",{class:"header-anchor",href:"#bio-blocking","aria-label":'Permalink to "BIO blocking"'},"​")],-1),l("p",null,"传统的阻塞模型，基于流的方式进行数据的读写。当一个线程调用输入输出进行操作时，它会被阻塞，直到操作完成。此时线程无法执行其他任务",-1),l("p",null,"线程模型：一对一",-1),l("p",null,"编程方式：流式编程",-1),l("h4",{id:"nio-new",tabindex:"-1"},[a("NIO new "),l("a",{class:"header-anchor",href:"#nio-new","aria-label":'Permalink to "NIO new"'},"​")],-1),l("p",null,"非阻塞IO模型，基于通道和缓冲区进行数据的读写。当一个线程调用输入输出操作的时候，不会被阻塞，而是立即返回，执行其他任务。",-1),l("p",null,"线程模型：多路复用器",-1),l("p",null,"编程方式：基于缓冲区和通道",-1),l("p",null,"通道：用于数据读写的对象，可以与文件、网络套接字等进行交互，实现数据等读取和写入操作",-1),l("p",null,"缓冲区：是一个容器对象，用于存储数据。",-1),l("p",null,"选择器：提供了非阻塞IO操作的能力",-1),l("h3",{id:"aio",tabindex:"-1"},[a("AIO "),l("a",{class:"header-anchor",href:"#aio","aria-label":'Permalink to "AIO"'},"​")],-1),l("p",null,"异步非阻塞IO，基于事件和回调机制。",-1),l("p",null,"应用操作之后会直接返回，不会阻塞。当后台处理完成，操作系统会通知相应的线程进行后续的操作。",-1),l("h3",{id:"_2、io多路复用机制",tabindex:"-1"},[a("2、IO多路复用机制 "),l("a",{class:"header-anchor",href:"#_2、io多路复用机制","aria-label":'Permalink to "2、IO多路复用机制"'},"​")],-1),l("p",null,"人话：一个线程可以同时监视多个IO流的机制，提高程序的性能和响应速度",-1),l("p",null,"一种通过一组IO操作来监视和等待多个文件描述符（通常是套接字）是否就绪，并在有就绪的文件描述符时进行相应操作的技术",-1),l("p",null,"常用的IO多路复用机制：select、poll、epoll",-1),l("p",null,"1、select是最早的io多路复用机制，通过select系统调用来监视多个文件描述符的状态。但是效率低，每次调用select都要将所有的文件描述符从用户态复制到内核态",-1),l("p",null,"2、poll机制：poll机制是select机制的改进版本，它也可以监视多个文件描述符的状态，并在其中任意一个文件描述符就绪时通知应用程序进行处理。相比于select机制，poll机制的效率更高，因为它使用了链表来保存文件描述符，而不是数组，可以避免每次调用都需要复制所有文件描述符的问题",-1),l("p",null,"3、epoll机制：epoll机制是Linux系统中的一种IO多路复用机制，它可以监视多个文件描述符的状态，并在其中任意一个文件描述符就绪时通知应用程序进行处理。相比于select和poll机制，epoll机制的效率更高，因为它使用了事件驱动的方式，可以避免遍历整个文件描述符集合的问题",-1),l("p",null,"原理：创建一个用于存储文件描述符的集合，并将文件描述符加入集合中，调用系统提供的IO多路复用函数（select、poll、epoll）阻塞等待，在有就绪的文件描述符的时候返回。当有文件描述符就绪时，可以对其进行读取、写入等操作，或进行其他处理。",-1),l("h3",{id:"_3、启动线程的方式",tabindex:"-1"},[a("3、启动线程的方式 "),l("a",{class:"header-anchor",href:"#_3、启动线程的方式","aria-label":'Permalink to "3、启动线程的方式"'},"​")],-1),l("h4",{id:"继承thread类",tabindex:"-1"},[a("继承thread类 "),l("a",{class:"header-anchor",href:"#继承thread类","aria-label":'Permalink to "继承thread类"'},"​")],-1),l("p",null,"继承thread类并重写其run()方法来创建线程，然后通过调用线程对象的start()方法",-1),l("h4",{id:"实现runnable接口",tabindex:"-1"},[a("实现runnable接口 "),l("a",{class:"header-anchor",href:"#实现runnable接口","aria-label":'Permalink to "实现runnable接口"'},"​")],-1),l("p",null,"创建一个类，实现runnable接口，实现run()方法（返回值是void）。通过创建thread对象，并将实现类runnable接口的对象作为参数传递给thread构造方法来创建线程。",-1),l("h4",{id:"实现callable接口",tabindex:"-1"},[a("实现callable接口 "),l("a",{class:"header-anchor",href:"#实现callable接口","aria-label":'Permalink to "实现callable接口"'},"​")],-1),l("p",null,"定义一个实现了callable接口等类，并实现其call()方法（返回值是一个泛型）",-1),l("h3",{id:"_4、幂等性-如何保证",tabindex:"-1"},[a("4、幂等性&如何保证 "),l("a",{class:"header-anchor",href:"#_4、幂等性-如何保证","aria-label":'Permalink to "4、幂等性&如何保证"'},"​")],-1),l("p",null,"幂等性：无论进行多少次相同的操作，结果都是一样的",-1),l("p",null,"方法：",-1),l("p",null,"1、使用唯一标识符：每次请求都使用唯一标识符，在处理请求之前，先检查该标识符是否已经存在，如果存在则直接返回之前的结果，避免重复操作",-1),l("p",null,"2、设计幂等性接口：在多次调用同一个接口时，只会执行一次实际的操作，后续的调用都会返回相同的结果",-1),l("p",null,"3、使用乐观锁或版本控制：在数据表中添加版本号或时间戳字段，每次更新数据时都检查该字段的值，如果与当前值不一致，则表示操作已经被其他线程执行过，可以避免重复更新",-1),l("h3",{id:"_5、多线程的状态",tabindex:"-1"},[a("5、多线程的状态 "),l("a",{class:"header-anchor",href:"#_5、多线程的状态","aria-label":'Permalink to "5、多线程的状态"'},"​")],-1),l("p",null,"1、新建：线程被创建但未启动的状态",-1),l("p",null,"创建Thread类的实例或者实现runnable接口并创建thread对象时的状态",-1),l("p",null,"2、运行：线程被启动并执行的状态",-1),l("p",null,"当调用线程对象的start()方法后，线程进入运行状态",-1),l("p",null,"3、阻塞：线程被阻塞并暂停执行的状态",-1),l("p",null,"当线程请求获取一个锁对象，但该锁对象被其他线程持有的时候，线程就会进入阻塞状态",-1),l("p",null,"4、等待：线程在等待某个条件满足时暂停执行的状态",-1),l("p",null,"5、计时等待：线程在等待某个条件满足时暂停执行的状态，但有一个指定的等待时间",-1),l("p",null,"6、终止：线程执行完毕或者因异常退出的状态",-1),l("h3",{id:"_6、实现线程同步的方式",tabindex:"-1"},[a("6、实现线程同步的方式 "),l("a",{class:"header-anchor",href:"#_6、实现线程同步的方式","aria-label":'Permalink to "6、实现线程同步的方式"'},"​")],-1),l("h4",{id:"_1、使用synchronized关键字",tabindex:"-1"},[a("1、使用synchronized关键字 "),l("a",{class:"header-anchor",href:"#_1、使用synchronized关键字","aria-label":'Permalink to "1、使用synchronized关键字"'},"​")],-1),l("p",null,"可以修饰方法或代码块，确保同一时间只有一个线程可以执行被修饰的方法或代码块。",-1),l("p",null,"当一个线程进入synchronized方法或者代码块时，它会尝试获取对象的锁。如果锁被其他线程持有，则该线程会被阻塞，直到获取到锁为止。",-1),l("p",null,"原理：当一个线程访问一个被synchronized修饰的方法或代码块时，会尝试获取对象的内置锁。如果当前没有其他线程持有该锁，那么该线程获取到锁，并且可以执行被修饰的方法或代码块。如果其他线程已经持有了该锁，那么当前线程会被阻塞，直到获取到锁为止。",-1),l("p",null,"有可重入性：一个线程持有锁的情况下可以再次进入被修饰的方法或代码块，而不会被自己所持有的锁阻塞。",-1),l("h4",{id:"_2、使用reentrantlock类",tabindex:"-1"},[a("2、使用reentrantLock类 "),l("a",{class:"header-anchor",href:"#_2、使用reentrantlock类","aria-label":'Permalink to "2、使用reentrantLock类"'},"​")],-1),l("p",null,"可重入锁，可以显式地获取和释放锁。reentrantLock提供了更灵活的锁定机制，可以实现公平锁和非公平锁，并支持多个条件变量",-1),l("h4",{id:"_3、使用lock和condition接口",tabindex:"-1"},[a("3、使用Lock和Condition接口 "),l("a",{class:"header-anchor",href:"#_3、使用lock和condition接口","aria-label":'Permalink to "3、使用Lock和Condition接口"'},"​")],-1),l("p",null,"Lock接口提供了与synchronized关键字类似的功能，而condition接口则提供了更灵活的线程等待/通知机制。通过Lock接口的newCondition方法可以创建多个condition对象，用于控制线程的等待和唤醒",-1),l("h3",{id:"_7、volatile关键字作用",tabindex:"-1"},[a("7、volatile关键字作用 "),l("a",{class:"header-anchor",href:"#_7、volatile关键字作用","aria-label":'Permalink to "7、volatile关键字作用"'},"​")],-1),l("p",null,"用于修饰变量，具有可见性和有序性",-1),l("h4",{id:"可见性",tabindex:"-1"},[a("可见性 "),l("a",{class:"header-anchor",href:"#可见性","aria-label":'Permalink to "可见性"'},"​")],-1),l("p",null,"当一个变量被声明为volatile时，保证在一个线程中对该变量的修改对其他线程时可见的。当一个线程修改了volatile变量的值，其他线程可以立即看到最新的值，而不会使用过期的缓存值",-1),l("h4",{id:"有序性",tabindex:"-1"},[a("有序性 "),l("a",{class:"header-anchor",href:"#有序性","aria-label":'Permalink to "有序性"'},"​")],-1),l("p",null,"当一个变量被声明为volatile时，禁止指令的重排，保证了操作的有序性，代码会按照顺序进行执行。",-1),l("h3",{id:"_8、线程",tabindex:"-1"},[a("8、线程 "),l("a",{class:"header-anchor",href:"#_8、线程","aria-label":'Permalink to "8、线程"'},"​")],-1),l("h4",{id:"进程",tabindex:"-1"},[a("进程 "),l("a",{class:"header-anchor",href:"#进程","aria-label":'Permalink to "进程"'},"​")],-1),l("p",null,"程序运行和资源分配的基本单位，一个程序至少有一个进程，一个进程至少有一个线程。进程在执行过程中拥有独立的内存单元，而多个线程共享内存资源",-1),l("h4",{id:"线程",tabindex:"-1"},[a("线程 "),l("a",{class:"header-anchor",href:"#线程","aria-label":'Permalink to "线程"'},"​")],-1),l("p",null,"cpu调度的基本单位，是比程序更小的能独立运行的基本单位。同一个进程中的多个线程之间可以并发执行",-1),l("h4",{id:"线程特性",tabindex:"-1"},[a("线程特性 "),l("a",{class:"header-anchor",href:"#线程特性","aria-label":'Permalink to "线程特性"'},"​")],-1),l("p",null,"可见性：一个线程对共享变量的修改，必须对其他线程可见 volatile关键字",-1),l("p",null,"原子性：一些操作在一个院子操作内完成。synchronized可以解决线程的原子性问题",-1),l("p",null,"有序性：按照代码先后顺序执行",-1),l("h4",{id:"引入线程的作用",tabindex:"-1"},[a("引入线程的作用 "),l("a",{class:"header-anchor",href:"#引入线程的作用","aria-label":'Permalink to "引入线程的作用"'},"​")],-1),l("p",null,"进程在同一时间只能做一件事情，如果执行过程中被阻塞，会被挂起",-1),l("p",null,"引入比进程粒度更小的线程，作为并发执行的基本单位，从而减少程序在并发执行时所付出的时间和空间开销，提高并发性能。",-1),l("h4",{id:"线程同步和线程异步",tabindex:"-1"},[a("线程同步和线程异步 "),l("a",{class:"header-anchor",href:"#线程同步和线程异步","aria-label":'Permalink to "线程同步和线程异步"'},"​")],-1),l("p",null,"线程同步：",-1),l("p",null,"多个线程在访问共享资源时，按照一定的顺序进行协调和执行，以保证数据的一致性和正确性。",-1),l("p",null,"更适合于多个线程共享数据并需要保证数据一致性的场景。",-1),l("p",null,"线程异步：",-1),l("p",null,"在执行任务时不需要等待结果返回，而可以继续进行其他任务。",-1),l("p",null,"适用于需要提高并发性和响应性的场景。",-1),l("h4",{id:"线程同步的方法",tabindex:"-1"},[a("线程同步的方法 "),l("a",{class:"header-anchor",href:"#线程同步的方法","aria-label":'Permalink to "线程同步的方法"'},"​")],-1),l("p",null,"1、使⽤ Synchronized 关键字；",-1),l("p",null,"2、wait 和 notify；",-1),l("p",null,"3、使⽤特殊域变量 volatile 实现线程同步；",-1),l("p",null,"4、使⽤可重⼊锁实现线程同步；",-1),l("p",null,"5、使⽤阻塞队列实现线程同步；",-1),l("p",null,"6、使⽤信号量 Semaphore",-1),l("h4",{id:"run",tabindex:"-1"},[a("run() "),l("a",{class:"header-anchor",href:"#run","aria-label":'Permalink to "run()"'},"​")],-1),l("p",null,"称为方法体，包含这个线程执行的内容",-1),l("p",null,"run方法是本线程的，本质上是一个普通函数",-1),l("h4",{id:"start",tabindex:"-1"},[a("start() "),l("a",{class:"header-anchor",href:"#start","aria-label":'Permalink to "start()"'},"​")],-1),l("p",null,"需要调用该方法来启动一个线程，此时处于就绪状态。",-1),l("p",null,"再调用run方法来完成线程的运行",-1),l("h4",{id:"sleep",tabindex:"-1"},[a("sleep() "),l("a",{class:"header-anchor",href:"#sleep","aria-label":'Permalink to "sleep()"'},"​")],-1),l("p",null,"调用会让正在执行的线程主动让出cpu，在sleep()指定时间后cpu再回到该线程继续往下执行",-1),l("p",null,"不会释放对象锁，到时间自动恢复",-1),l("p",null,"可以在任何地方使用",-1),l("p",null,"是thread的方法",-1),l("h4",{id:"wait",tabindex:"-1"},[a("wait() "),l("a",{class:"header-anchor",href:"#wait","aria-label":'Permalink to "wait()"'},"​")],-1),l("p",null,"调用会放弃对象锁，进入等待队列",-1),l("p",null,"是object()的方法",-1),l("p",null,"只能在同步方法或同步块中使用",-1),l("h4",{id:"进程的调度算法",tabindex:"-1"},[a("进程的调度算法 "),l("a",{class:"header-anchor",href:"#进程的调度算法","aria-label":'Permalink to "进程的调度算法"'},"​")],-1),l("p",null,"先来先服务、时间片轮转、短作业优先调度、最短剩余时间优先、高响应比优先调度、优先级调度",-1),l("h3",{id:"_9、synchronized关键字",tabindex:"-1"},[a("9、synchronized关键字 "),l("a",{class:"header-anchor",href:"#_9、synchronized关键字","aria-label":'Permalink to "9、synchronized关键字"'},"​")],-1),l("h4",{id:"底层优化",tabindex:"-1"},[a("底层优化 "),l("a",{class:"header-anchor",href:"#底层优化","aria-label":'Permalink to "底层优化"'},"​")],-1),l("p",null,"锁有四种状态：无锁状态、偏向锁状态、轻量级锁状态、重量级锁状态",-1),l("p",null,"随着竞争的激烈而逐渐升级，但是不可以降级",-1),l("h4",{id:"无锁",tabindex:"-1"},[a("无锁 "),l("a",{class:"header-anchor",href:"#无锁","aria-label":'Permalink to "无锁"'},"​")],-1),l("p",null,"没有对资源进行锁定，所有的线程都能访问并修改同一个资源，但同时只有一个线程能修改成功。",-1),l("p",null,"修改操作会在循环内进行，线程会不断地尝试修改共享资源。如果没有冲突就修改成功并退出，否则继续循环尝试。如果有多个线程修改同一个值，必定会有一个线程修改成功，而其他修改失败的线程会不断重试直到修改成功。",-1),l("h4",{id:"偏向锁",tabindex:"-1"},[a("偏向锁 "),l("a",{class:"header-anchor",href:"#偏向锁","aria-label":'Permalink to "偏向锁"'},"​")],-1),l("p",null,"偏向于第一个获得它的线程的锁。",-1),l("p",null,"如果该锁没有被其他线程获取，那么持有偏向锁的线程就不需要进行同步。",-1),l("p",null,"但是锁竞争比较激烈的情况下，偏向锁失效，每次申请锁的线程都是不相同的，会升级为轻量级锁",-1),l("h4",{id:"轻量级锁",tabindex:"-1"},[a("轻量级锁 "),l("a",{class:"header-anchor",href:"#轻量级锁","aria-label":'Permalink to "轻量级锁"'},"​")],-1),l("p",null,"当一个线程想要获取轻量级锁时，首先会尝试CAS操作来将锁的标记设置为自己的标记。",-1),l("p",null,"如果CAS成功，表示该线程成功获取到轻量级锁，可以继续执行操作。",-1),l("p",null,"如果CAS失败，表示其他线程已经获取了锁或者锁已经升级成重量级锁，那么当前线程会膨胀为重量级锁。",-1),l("h4",{id:"重量级锁",tabindex:"-1"},[a("重量级锁 "),l("a",{class:"header-anchor",href:"#重量级锁","aria-label":'Permalink to "重量级锁"'},"​")],-1),l("p",null,"当一个线程想要获取重量级锁时，会先阻塞自己，并将自己加入到锁的等待队列中。当锁释放时，会从等待队列中选择一个线程进行唤醒，被唤醒的线程将尝试获取锁，并继续执行操作",-1),l("h4",{id:"使用方式",tabindex:"-1"},[a("使用方式 "),l("a",{class:"header-anchor",href:"#使用方式","aria-label":'Permalink to "使用方式"'},"​")],-1),l("p",null,"1、修饰实例方法：作用于当前实例加锁，进入同步代码前获得当前对象实例的锁",-1),l("p",null,"2、修饰静态方法：作⽤于当前类对象加锁，进⼊同步代码前要获得当前类对象的锁 。",-1),l("p",null,"也就是给当前类加锁，会作用于类的所有对象实例，因为静态成员不属于任何一个实例对象。",-1),l("p",null,"3、修饰代码块：指定加锁对象，对给定对象加锁，进⼊同步代码库前要获得给定对象的锁。",-1),l("h4",{id:"synchronized实现原理",tabindex:"-1"},[a("synchronized实现原理 "),l("a",{class:"header-anchor",href:"#synchronized实现原理","aria-label":'Permalink to "synchronized实现原理"'},"​")],-1),l("p",null,"是java中最基本的线程同步机制。每个对象都有一个内部锁，可以通过synchronized来获取这个对象的内部锁，当一个线程持有了对象的内部锁后，其他线程就无法同时访问这个对象的相关资源，直到持有锁的线程释放了为止",-1),l("p",null,"非公平锁，当一个线程释放锁后，会从等待队列中选一个锁来完成",-1),l("h4",{id:"synchronized-和-volatile-的区别是什么",tabindex:"-1"},[l("strong",null,"synchronized"),a(),l("strong",null,"和"),a(),l("strong",null,"volatile"),a(),l("strong",null,"的区别是什么"),a(),l("a",{class:"header-anchor",href:"#synchronized-和-volatile-的区别是什么","aria-label":'Permalink to "**synchronized** **和** **volatile** **的区别是什么**"'},"​")],-1),l("p",null,"1、volatile 本质是在告诉 JVM当前变量在寄存器（⼯作内存）中的值是不确定的，需要从主存中读取；synchronized 则是锁定当前变量，只有当前线程可以访问该变量，其他线程被阻塞住。",-1),l("p",null,"2、volatile 仅能使⽤在变量级别；synchronized 则可以使⽤在变量、⽅法、和类级别的。",-1),l("p",null,"3、volatile 仅能实现变量的修改可⻅性，不能保证原⼦性；⽽ synchronized 则可以保证变量的修改可⻅性和原⼦性。",-1),l("p",null,"4、volatile 不会造成线程的阻塞；synchronized 可能会造成线程的阻塞。",-1),l("p",null,"5、volatile 标记的变量不会被编译器优化；synchronized 标记的变量可以被编译器优化。",-1),l("h4",{id:"synchronized和lock的区别",tabindex:"-1"},[a("synchronized和lock的区别 "),l("a",{class:"header-anchor",href:"#synchronized和lock的区别","aria-label":'Permalink to "synchronized和lock的区别"'},"​")],-1),l("p",null,"1、获取方式：进入synchronized保护的代码块或者方法时，自动获取锁。lock需要手动加锁或者释放锁",-1),l("p",null,"2、锁的释放：synchronized在加锁的代码块执行完毕后自动释放，但是lock需要手动加锁和释放锁",-1),l("p",null,"3、粒度：synchronized比lock粒度大",-1),l("p",null,"4、可中断性：synchronized不可中断，lock可以通过trylock方法尝试获取，并设置超时时间",-1),l("p",null,"5、性能：synchronized虽然优化，但是多线程情况下性能下降的快，lock可以根据具体情况调整",-1),l("h3",{id:"_10、线程池",tabindex:"-1"},[a("10、线程池 "),l("a",{class:"header-anchor",href:"#_10、线程池","aria-label":'Permalink to "10、线程池"'},"​")],-1),l("h4",{id:"概念",tabindex:"-1"},[a("概念 "),l("a",{class:"header-anchor",href:"#概念","aria-label":'Permalink to "概念"'},"​")],-1),l("p",null,"是一种管理和复用线程的机制，可以提高线程的使用效率和管理性能。",-1),l("p",null,"ThreadPoolExecutor",-1),l("h4",{id:"好处",tabindex:"-1"},[a("好处 "),l("a",{class:"header-anchor",href:"#好处","aria-label":'Permalink to "好处"'},"​")],-1),l("p",null,"1、降低资源消耗：通过重复利用已创建的线程降低线程创建和销毁造成的消耗",-1),l("p",null,"2、提高响应速度：当任务到达时，任务可以不需要等待线程创建就立即执行",-1),l("p",null,"3、提高线程的可管理性：使用线程池可以进行统一的分配、调优和监控线程。如果无限制创建线程，不仅会消耗系统资源，还会降低系统的稳定性",-1),l("h4",{id:"参数",tabindex:"-1"},[a("参数 "),l("a",{class:"header-anchor",href:"#参数","aria-label":'Permalink to "参数"'},"​")],-1),l("p",null,"1、corePoolSize（线程池的基本大小）：小于这个参数则创建一个线程来执行任务，大于线程池基本大小就不再创建",-1),l("p",null,"2、maximumPoolSize（线程池最大数量）：允许创建的最大线程数。",-1),l("p",null,"如果队列慢，创建的线程小于最大的线程数，则线程池会再创建新的线程执行任务。",-1),l("p",null,"3、workQueue（任务队列）：用于保存等待执行的任务的阻塞队列",-1),l("p",null,"4、 keepAliveTime（线程活动保持时间）：线程池的⼯作线程空闲后，保持存活的时间。所以，如果任务很多，",-1),l("p",null,"并且每个任务执⾏的时间⽐较短，可以调⼤时间，提⾼线程的利⽤率。",-1),l("h4",{id:"如何创建",tabindex:"-1"},[a("如何创建 "),l("a",{class:"header-anchor",href:"#如何创建","aria-label":'Permalink to "如何创建"'},"​")],-1),l("p",null,"1、通过 ThreadPoolExecutor 的构造⽅法实现",-1),l("p",null,"2、通过 Executor 框架的⼯具类 Executors 来实现",-1),l("p",null,"我们可以创建三种类型的 ThreadPoolExecutor：",-1),l("p",null,"1、FixedThreadPool：该⽅法返回⼀个固定线程数量的线程池。该线程池中的线程数量始终不变。当有⼀个新的任务提交时，线程池中若有空闲线程，则⽴即执⾏。若没有，则新的任务会被暂存在⼀个任务队列中，待有线程空",-1),l("p",null,"闲时，便处理在任务队列中的任务。",-1),l("p",null,"2、 SingleThreadExecutor：⽅法返回⼀个只有⼀个线程的线程池。若多余⼀个任务被提交到该线程池，任务会被",-1),l("p",null,"保存在⼀个任务队列中，待线程空闲，按先进先出的顺序执⾏队列中的任务。",-1),l("p",null,"3、CachedThreadPool：该⽅法返回⼀个可根据实际情况调整线程数量的线程池。线程池的线程数量不确定，但",-1),l("p",null,"若有空闲线程可以复⽤，则会优先使⽤可复⽤的线程。若所有线程均在⼯作，⼜有新的任务提交，则会创建新的线",-1),l("p",null,"程处理任务。所有线程在当前任务执⾏完毕后，将返回线程池进⾏复⽤。",-1),l("h4",{id:"线程数一般怎么设置",tabindex:"-1"},[a("线程数一般怎么设置 "),l("a",{class:"header-anchor",href:"#线程数一般怎么设置","aria-label":'Permalink to "线程数一般怎么设置"'},"​")],-1),l("p",null,"1、密集型的任务一般设置线程数大小等于或略大于cpu的核心数；IO型的任务主要时间消耗在IO等待上，cpu压力并不大",-1),l("h4",{id:"和线程的区别",tabindex:"-1"},[a("和线程的区别 "),l("a",{class:"header-anchor",href:"#和线程的区别","aria-label":'Permalink to "和线程的区别"'},"​")],-1),l("p",null,"线程需要开发者手动控制，线程池可以自动适应和调整线程的数量",-1),l("p",null,"线程需要开发者手动编写任务调度和线程执行的逻辑，包括任务的提交、执行和结果处理。但是线程池不需要，提供了内置的任务管理和调度机制",-1),l("p",null,"线程池可以提供并发控制机制，通过线程池的配置参数和任务队列",-1),l("h4",{id:"线程池工作过程",tabindex:"-1"},[a("线程池工作过程 "),l("a",{class:"header-anchor",href:"#线程池工作过程","aria-label":'Permalink to "线程池工作过程"'},"​")],-1),l("p",null,"首先初始化线程池，创建一定数量的线程，并将这些线程位于就绪状态",-1),l("p",null,"然后将这些线程加入任务队列中，有任务被提交到线程池后，",-1),l("p",null,"在任务队列中选择一个任务，分配一个线程去执行。线程执行完成后，",-1),l("p",null,"返回线程池，空闲等待下一个任务。没有新的任务，会销毁线程池，最后关闭",-1),l("h4",{id:"线程池相关的队列",tabindex:"-1"},[a("线程池相关的队列 "),l("a",{class:"header-anchor",href:"#线程池相关的队列","aria-label":'Permalink to "线程池相关的队列"'},"​")],-1),l("p",null,"直接提交队列：没有容量限制，提交的任务会被立即执行。适用于需要立即执行任务，但是任务量不大且执行时间较短的场景。",-1),l("p",null,"无界队列：容量无限，可以接受任意数量的队列。适用于任务提交块且任务量较大的场景。",-1),l("p",null,"有界队列：固定容量。适用于资源有限的场景，控制系统负载和资源消耗",-1),l("p",null,"优先级队列：优先级高的任务会被优先执行。适用于任务有不同优先级，需要按优先级顺序执行的场景。",-1),l("h4",{id:"拒绝策略",tabindex:"-1"},[a("拒绝策略 "),l("a",{class:"header-anchor",href:"#拒绝策略","aria-label":'Permalink to "拒绝策略"'},"​")],-1),l("p",null,"默认策略：当线程池无法处理新提交的任务，将抛出异常",-1),l("p",null,"DiscardOldestPolicy：当线程池无法处理新提交的任务时，将丢弃任务队列中最旧的任务（即最先提交的任务），然后尝试再次提交新任务",-1),l("h4",{id:"使用线程池不指定任务队列最大容量的后果",tabindex:"-1"},[a("使用线程池不指定任务队列最大容量的后果 "),l("a",{class:"header-anchor",href:"#使用线程池不指定任务队列最大容量的后果","aria-label":'Permalink to "使用线程池不指定任务队列最大容量的后果"'},"​")],-1),l("p",null,"线程池将创建更多线程来处理请求，导致服务器资源耗尽，如CPU、内存、IO 会导致处理新任务的速度变慢 现象：线程创建数线性上升、cpu水位上升、rt上涨 排查：看上涨时间点，最近一次发布导致的 看发布内容",-1),l("h3",{id:"_11、threadlocal",tabindex:"-1"},[a("11、threadlocal "),l("a",{class:"header-anchor",href:"#_11、threadlocal","aria-label":'Permalink to "11、threadlocal"'},"​")],-1),l("h4",{id:"概念-1",tabindex:"-1"},[a("概念 "),l("a",{class:"header-anchor",href:"#概念-1","aria-label":'Permalink to "概念"'},"​")],-1),l("p",null,"用来解决线程安全的问题，每个线程都开辟了一块内存空间，用来存储共享变量的一个副本，每个线程只需要去访问和操作自己的共享变量的一个副本就可以",-1),l("p",null,"ThreadLocal 提供 get 和 set ⽅法，为每⼀个使⽤这个变量的线程都保存有⼀份独⽴的副本",-1),l("h4",{id:"使用场景",tabindex:"-1"},[a("使用场景 "),l("a",{class:"header-anchor",href:"#使用场景","aria-label":'Permalink to "使用场景"'},"​")],-1),l("p",null,"调用API的时候传递了一些公共参数，将这些公共参数传递给threadlocal，避免了参数的层层传递，需要用的时候取出来就行",-1),l("h4",{id:"内存泄漏的问题",tabindex:"-1"},[a("内存泄漏的问题 "),l("a",{class:"header-anchor",href:"#内存泄漏的问题","aria-label":'Permalink to "内存泄漏的问题"'},"​")],-1),l("p",null,"线程共享变量threadlocalmap中的key是弱引用，threadlocal没有强引用关系的时候，对象会被gc回收，造成这块内存永久无法被访问",-1),l("p",null,"解决方法：",-1),l("p",null,"1、扩大成员变量threadlocal的作用域，避免被gc回收",-1),l("p",null,"2、使用threadlocal后，调用remove方法移除对应的数据",-1),l("h3",{id:"_12、mvcc-多版本并发控制",tabindex:"-1"},[a("12、MVCC-多版本并发控制 "),l("a",{class:"header-anchor",href:"#_12、mvcc-多版本并发控制","aria-label":'Permalink to "12、MVCC-多版本并发控制"'},"​")],-1),l("p",null,"数据库并发场景：",-1),l("p",null,"1、读-读：不存在任何问题，也不需要并发控制",-1),l("p",null,"2、读-写：有线程安全问题，可能会造成事务隔离性问题，可能遇到脏读、幻读、不可重复读",-1),l("p",null,"3、写-写：有线程安全问题，可能存在更新丢失问题",-1),l("p",null,"多版本并发控制是一种用来解决读-写冲突的无锁并发控制，为事务分配单向增长的时间戳，为每个修改保存一个版本，版本与事务时间戳关联，读操作只读该事务开始前的数据库的快照",-1),l("p",null,"可以为数据库解决以下问题：",-1),l("p",null,"1、在并发读写数据库时，可以做到在读操作时不用阻塞写操作，写操作也不用阻塞读操作",-1),l("p",null,"2、同时可以解决脏读、幻读、不可重复读等事务隔离问题，但不能解决更新丢失问题",-1),l("h3",{id:"_13、io流的分类",tabindex:"-1"},[a("13、IO流的分类 "),l("a",{class:"header-anchor",href:"#_13、io流的分类","aria-label":'Permalink to "13、IO流的分类"'},"​")],-1),l("p",null,"按功能来分：输⼊流（input）、输出流（output）。",-1),l("p",null,"按类型来分：字节流 和 字符流。",-1),l("p",null,"字节流：InputStream/OutputStream 是字节流的抽象类，这两个抽象类⼜派⽣了若⼲⼦类，不同的⼦类分别处理不同的操作类型。",-1),l("p",null,"字符流：Reader/Writer 是字符的抽象类，这两个抽象类也派⽣了若⼲⼦类，不同的⼦类分别处理不同的操作类型",-1),l("h4",{id:"字节流和字符流的区别",tabindex:"-1"},[a("字节流和字符流的区别 "),l("a",{class:"header-anchor",href:"#字节流和字符流的区别","aria-label":'Permalink to "字节流和字符流的区别"'},"​")],-1),l("p",null,"字节流按 8 位传输，以字节为单位输⼊输出数据，字符流按 16 位传输，以字符为单位输⼊输出数据。",-1),l("p",null,"但是不管⽂件读写还是⽹络发送接收，信息的最⼩存储单元都是字节。",-1),l("h3",{id:"_14、死锁产生的必要条件",tabindex:"-1"},[a("14、死锁产生的必要条件 "),l("a",{class:"header-anchor",href:"#_14、死锁产生的必要条件","aria-label":'Permalink to "14、死锁产生的必要条件"'},"​")],-1),l("p",null,"互斥条件：一段时间内某资源仅为一进程所占用",-1),l("p",null,"请求和保持条件：当进程因请求资源而阻塞时，对已获得的资源保持不放",-1),l("p",null,"不剥夺条件：进程已获得的资源在未使用完之前，只能在使用完时由自己释放",-1),l("p",null,"环路等待条件：在发生死锁时，必然存在一个进程、资源的环形链",-1),l("p",null,"破坏死锁：",-1),l("p",null,"一次性分配所有资源、只要有一个资源得不到分配，也不给这个进程分配其他的资源",-1),l("p",null,"当某进程获得了部分资源，但得不到其他资源，则释放已占有的资源",-1),l("h3",{id:"_15、介绍一下几种典型的锁",tabindex:"-1"},[a("15、介绍一下几种典型的锁 "),l("a",{class:"header-anchor",href:"#_15、介绍一下几种典型的锁","aria-label":'Permalink to "15、介绍一下几种典型的锁"'},"​")],-1),l("p",null,"读写锁：读者可以同时读、写者必须互斥、写者优先于读者",-1),l("p",null,"互斥锁：一次只能一个线程拥有互斥锁，其他线程只有等待",-1),l("p",null,"自旋锁：线程无法获取锁，不会立刻放弃CPU时间片，而是一直循环尝试获取锁",-1),l("h3",{id:"_16、同步锁和分段锁",tabindex:"-1"},[a("16、同步锁和分段锁 "),l("a",{class:"header-anchor",href:"#_16、同步锁和分段锁","aria-label":'Permalink to "16、同步锁和分段锁"'},"​")],-1),l("p",null,"同步锁是以线程为粒度加锁的，同一时间一个线程访问代码块，粒度大，会影响性能，适用于代码量小、并发量高的场景",-1),l("p",null,"分段锁是以数据结构的某个部分为粒度进行加锁，粒度小，提高代码执行效率，适用于代码块大、并发量高的场景",-1),l("h3",{id:"_17、乐观锁",tabindex:"-1"},[a("17、乐观锁 "),l("a",{class:"header-anchor",href:"#_17、乐观锁","aria-label":'Permalink to "17、乐观锁"'},"​")],-1),l("p",null,"假设并发冲突不会发生，而是在对共享资源进行修改前，先进行检查验证，判断是否有其他线程修改了资源。",-1),l("p",null,"乐观锁⼀般会使⽤版本号机制或者 CAS 算法实现",-1),l("h4",{id:"版本号机制",tabindex:"-1"},[a("版本号机制 "),l("a",{class:"header-anchor",href:"#版本号机制","aria-label":'Permalink to "版本号机制"'},"​")],-1),l("p",null,"⼀般是在数据表中加上⼀个数据版本号 version 字段，表示数据被修改的次数，当数据被修改时，version 值会加 1。当线程 A 要更新数据值时，在读取数据的同时也会读取 version 值，在提交更新时，若刚才读取到的version 值为当前数据库中的 version 值相等时才更新，否则重试更新操作，直到更新成功。",-1),l("h4",{id:"cas-算法-比较并交换",tabindex:"-1"},[a("CAS 算法（比较并交换） "),l("a",{class:"header-anchor",href:"#cas-算法-比较并交换","aria-label":'Permalink to "CAS 算法（比较并交换）"'},"​")],-1),l("p",null,"乐观锁的思想，在无锁状态下保证线程操作数据的原子性。",-1),l("p",null,"调用底层unsafe类的方法",-1),l("p",null,"当且仅当需要读写的内存值和进行比较的值相同时，才会更新操作，否则不会执行任何操作",-1),l("h3",{id:"_18、悲观锁",tabindex:"-1"},[a("18、悲观锁 "),l("a",{class:"header-anchor",href:"#_18、悲观锁","aria-label":'Permalink to "18、悲观锁"'},"​")],-1),l("p",null,"每次访问共享资源时都假设会发生冲突，因此采取加锁的方式保证资源的独占性。",-1),l("h3",{id:"_19、信号量semaphore的理解",tabindex:"-1"},[a("19、信号量semaphore的理解 "),l("a",{class:"header-anchor",href:"#_19、信号量semaphore的理解","aria-label":'Permalink to "19、信号量semaphore的理解"'},"​")],-1),l("p",null,"semaphore (信号量)可以指定多个线程同时访问某个资源。",-1),l("p",null,"执⾏ acquire ⽅法阻塞，直到有⼀个许可证可以获得然后拿⾛⼀个许可证；每个 release ⽅法增加⼀个许可证，这可能会释放⼀个阻塞的 acquire ⽅法。然⽽，其实并没有实际的许可证这个对象，Semaphore 只是维持了⼀个可获得许可证的数量。",-1),l("p",null,"Semaphore 经常⽤于限制获取某种资源的线程数量。当然⼀次也可以⼀次拿取和释放多个许可证，不过⼀般没有必要这样做。",-1),l("h3",{id:"_20、lock",tabindex:"-1"},[a("20、lock "),l("a",{class:"header-anchor",href:"#_20、lock","aria-label":'Permalink to "20、lock"'},"​")],-1),l("p",null,"底层AQS ：构建锁和同步器的框架",-1),l("h3",{id:"_21、内存泄漏",tabindex:"-1"},[a("21、内存泄漏 "),l("a",{class:"header-anchor",href:"#_21、内存泄漏","aria-label":'Permalink to "21、内存泄漏"'},"​")],-1),l("p",null,"未关闭资源：",-1),l("p",null,"集合类存储对象：集合清空时没有将对象的引用与集合的关联解除",-1),l("p",null,"静态引用：长时间保持对对象的静态引用不释放",-1),l("p",null,"使用线程池：没有正确关闭线程池，线程仍然保持对资源的引用",-1)])),"main-header":e(()=>[r(n.$slots,"main-header")]),"main-header-after":e(()=>[r(n.$slots,"main-header-after")]),"main-nav":e(()=>[r(n.$slots,"main-nav")]),"main-content-before":e(()=>[r(n.$slots,"main-content-before")]),"main-content":e(()=>[r(n.$slots,"main-content")]),"main-content-after":e(()=>[r(n.$slots,"main-content-after")]),"main-nav-before":e(()=>[r(n.$slots,"main-nav-before")]),"main-nav-after":e(()=>[r(n.$slots,"main-nav-after")]),comment:e(()=>[r(n.$slots,"comment")]),footer:e(()=>[r(n.$slots,"footer")]),aside:e(()=>[r(n.$slots,"aside")]),"aside-custom":e(()=>[r(n.$slots,"aside-custom")]),default:e(()=>[r(n.$slots,"default")]),_:3},8,["frontmatter"])}}};export{V as default,y as usePageData};
