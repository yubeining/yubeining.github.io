import{_ as p}from"./ValaxyMain.vue_vue_type_style_index_0_lang.DXFDIcRI.js";import{f as b,a as f,u as v}from"./chunks/vue-router.CE6eJGTm.js";import{O as k,a4 as e,V as n,U as a,X as l,u as P,P as j,A as g}from"./framework.CgPPQfmH.js";import"./app.2Hk-Pb-P.js";import"./chunks/dayjs.CCYrSalk.js";import"./chunks/vue-i18n.BoM8szIi.js";import"./chunks/pinia.BjFmakTL.js";import"./chunks/@vueuse/motion.Cp--YhDB.js";import"./chunks/nprogress.BahbDzmd.js";import"./YunComment.vue_vue_type_style_index_0_lang.DC8N30BB.js";import"./index.C5okkQwF.js";import"./YunPageHeader.vue_vue_type_script_setup_true_lang.PEAAi8W5.js";import"./post.CGlAV6UI.js";const _=b("/posts/study notes/java base knowledge/java jvm",async t=>JSON.parse('{"title":"java jvm","description":"","frontmatter":{"title":"java jvm","date":"2025-04-19","updated":"2025-04-19","categories":"java","tags":["java","笔记"],"top":1},"headers":[{"level":3,"title":"1、jvm内存区域分布","slug":"_1、jvm内存区域分布","link":"#_1、jvm内存区域分布","children":[]},{"level":3,"title":"2、垃圾回收算法","slug":"_2、垃圾回收算法","link":"#_2、垃圾回收算法","children":[]},{"level":3,"title":"3、对象可以被回收的条件","slug":"_3、对象可以被回收的条件","link":"#_3、对象可以被回收的条件","children":[]},{"level":3,"title":"4、GC ROOT对象","slug":"_4、gc-root对象","link":"#_4、gc-root对象","children":[]},{"level":3,"title":"5、JVM调优","slug":"_5、jvm调优","link":"#_5、jvm调优","children":[]},{"level":3,"title":"6、排查CPU飙升的问题","slug":"_6、排查cpu飙升的问题","link":"#_6、排查cpu飙升的问题","children":[]},{"level":3,"title":"7、内存泄漏","slug":"_7、内存泄漏","link":"#_7、内存泄漏","children":[]},{"level":3,"title":"8、方法执行过程","slug":"_8、方法执行过程","link":"#_8、方法执行过程","children":[]},{"level":3,"title":"9、JVM主要组成部分及其作用","slug":"_9、jvm主要组成部分及其作用","link":"#_9、jvm主要组成部分及其作用","children":[]},{"level":3,"title":"10、类加载机制","slug":"_10、类加载机制","link":"#_10、类加载机制","children":[]},{"level":3,"title":"11、指令重排","slug":"_11、指令重排","link":"#_11、指令重排","children":[]},{"level":3,"title":"12、G1收集器","slug":"_12、g1收集器","link":"#_12、g1收集器","children":[]},{"level":3,"title":"13、fullgc原理","slug":"_13、fullgc原理","link":"#_13、fullgc原理","children":[]}],"relativePath":"pages/posts/study notes/java base knowledge/java jvm.md","lastUpdated":1745542762000}'),{lazy:(t,s)=>t.name===s.name}),E={__name:"java jvm",setup(t,{expose:s}){var d;const{data:o}=_(),u=v(),h=f(),i=Object.assign(h.meta.frontmatter||{},((d=o.value)==null?void 0:d.frontmatter)||{});return h.meta.frontmatter=i,u.currentRoute.value.data=o.value,g("valaxy:frontmatter",i),globalThis.$frontmatter=i,s({frontmatter:{title:"java jvm",date:"2025-04-19",updated:"2025-04-19",categories:"java",tags:["java","笔记"],top:1}}),(r,c)=>{const m=p;return j(),k(m,{frontmatter:P(i)},{"main-content-md":e(()=>c[0]||(c[0]=[a("h1",{id:"jvm",tabindex:"-1"},[l("JVM "),a("a",{class:"header-anchor",href:"#jvm","aria-label":'Permalink to "JVM"'},"​")],-1),a("h3",{id:"_1、jvm内存区域分布",tabindex:"-1"},[l("1、jvm内存区域分布 "),a("a",{class:"header-anchor",href:"#_1、jvm内存区域分布","aria-label":'Permalink to "1、jvm内存区域分布"'},"​")],-1),a("h4",{id:"程序计数器",tabindex:"-1"},[l("程序计数器 "),a("a",{class:"header-anchor",href:"#程序计数器","aria-label":'Permalink to "程序计数器"'},"​")],-1),a("p",null,"保存着当前线程所执行的字节码指令的地址。每个线程都有一个独立的程序计数器，用于控制线程的执行流程。",-1),a("p",null,"因为JVM的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器都只会执行一条线程中的命令。为了线程切换之后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器。",-1),a("h4",{id:"java栈",tabindex:"-1"},[l("java栈 "),a("a",{class:"header-anchor",href:"#java栈","aria-label":'Permalink to "java栈"'},"​")],-1),a("p",null,"每个方法在执行的时候都会创建一个帧栈，存储方法的局部变量、方法参数、返回值和操作数栈",-1),a("p",null,"为虚拟机执行java方法服务",-1),a("h4",{id:"本地方法栈",tabindex:"-1"},[l("本地方法栈 "),a("a",{class:"header-anchor",href:"#本地方法栈","aria-label":'Permalink to "本地方法栈"'},"​")],-1),a("p",null,"与java栈类似，但用于执行本地方法的数据和信息",-1),a("p",null,"为虚拟机使用到的native方法服务",-1),a("h4",{id:"堆",tabindex:"-1"},[l("堆 "),a("a",{class:"header-anchor",href:"#堆","aria-label":'Permalink to "堆"'},"​")],-1),a("p",null,"最大的一块内存区域，用于存储对象实例和数组。所有的对象实例和数组都在堆上分配内存空间。",-1),a("p",null,"堆被所有线程共享，在java虚拟机启动时被创建",-1),a("p",null,"是垃圾收集器管理的主要区域，也被称为GC堆",-1),a("h4",{id:"方法区",tabindex:"-1"},[l("方法区 "),a("a",{class:"header-anchor",href:"#方法区","aria-label":'Permalink to "方法区"'},"​")],-1),a("p",null,"用于存储已被加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。jdk8后，永久代被元空间取代",-1),a("h4",{id:"运行时常量池",tabindex:"-1"},[l("运行时常量池 "),a("a",{class:"header-anchor",href:"#运行时常量池","aria-label":'Permalink to "运行时常量池"'},"​")],-1),a("p",null,"方法区等一部分，用于存放编译器生成的各种字面量和符号引用。包含了类和接口的常量、字段和方法的符号引用",-1),a("h4",{id:"堆和栈的区别",tabindex:"-1"},[l("堆和栈的区别 "),a("a",{class:"header-anchor",href:"#堆和栈的区别","aria-label":'Permalink to "堆和栈的区别"'},"​")],-1),a("p",null,"堆：线程独享，堆中主要存放对象实例。堆是存储的单位。",-1),a("p",null,"栈：线程共享，主要存放各种基本数据类型、对象的引用。栈是运行的单位，包括局部变量、程序运行状态、方法返回值。",-1),a("h4",{id:"堆内存的分区",tabindex:"-1"},[l("堆内存的分区 "),a("a",{class:"header-anchor",href:"#堆内存的分区","aria-label":'Permalink to "堆内存的分区"'},"​")],-1),a("p",null,"分为两个不同的区域：新生代和老年代",-1),a("p",null,"新生代分为一个较小的eden空间和两个较小的survivor空间",-1),a("p",null,"老年代则大很多",-1),a("h4",{id:"为什么jvm使用了元空间替换了永久代",tabindex:"-1"},[l("为什么JVM使用了元空间替换了永久代 "),a("a",{class:"header-anchor",href:"#为什么jvm使用了元空间替换了永久代","aria-label":'Permalink to "为什么JVM使用了元空间替换了永久代"'},"​")],-1),a("p",null,"1.7中的永久代是有上限的，jvm加载的class总数是很难确定的，容易出现oom的问题",-1),a("p",null,"元空间是存储在本地内存中，内存上限很大",-1),a("p",null,"替换后，简化了fullgc垃圾回收的过程，提升了gc的性能",-1),a("h3",{id:"_2、垃圾回收算法",tabindex:"-1"},[l("2、垃圾回收算法 "),a("a",{class:"header-anchor",href:"#_2、垃圾回收算法","aria-label":'Permalink to "2、垃圾回收算法"'},"​")],-1),a("h4",{id:"标记清除算法",tabindex:"-1"},[l("标记清除算法 "),a("a",{class:"header-anchor",href:"#标记清除算法","aria-label":'Permalink to "标记清除算法"'},"​")],-1),a("p",null,"最基本的垃圾回收算法。从根结点开始，标记所有被引用的对象。在清除阶段，遍历整个堆，清除所有未被标记的对象。缺点是会产生内存碎片",-1),a("h4",{id:"标记复制算法",tabindex:"-1"},[l("标记复制算法 "),a("a",{class:"header-anchor",href:"#标记复制算法","aria-label":'Permalink to "标记复制算法"'},"​")],-1),a("p",null,"将堆内存分为两块区域。当一块区域被填满之后，将存活的对象复制到另一块区域中，然后清除原来的区域。不会产生内存碎片，但是需要额外的空间",-1),a("h4",{id:"标记整理算法",tabindex:"-1"},[l("标记整理算法 "),a("a",{class:"header-anchor",href:"#标记整理算法","aria-label":'Permalink to "标记整理算法"'},"​")],-1),a("p",null,"标记所有被引用的对象，然后将存活的对象向一端移动，并清除边界之外的内存。",-1),a("h4",{id:"分代算法",tabindex:"-1"},[l("分代算法 "),a("a",{class:"header-anchor",href:"#分代算法","aria-label":'Permalink to "分代算法"'},"​")],-1),a("p",null,"将堆内存划分为几个代，通常是新生代和老年代。在堆区之外还有一个代是永久代",-1),a("p",null,"新生代每次垃圾回收时都有大量的对象需要被回收，那么就可以根据不同代的特点采取最适合的收集算法",-1),a("h4",{id:"分代收集下的年轻代和老年代应该采用什么样的垃圾回收算法",tabindex:"-1"},[l("分代收集下的年轻代和⽼年代应该采⽤什么样的垃圾回收算法 "),a("a",{class:"header-anchor",href:"#分代收集下的年轻代和老年代应该采用什么样的垃圾回收算法","aria-label":'Permalink to "分代收集下的年轻代和⽼年代应该采⽤什么样的垃圾回收算法"'},"​")],-1),a("p",null,"年轻代：标记复制算法",-1),a("p",null,"大多数生命周期较短，很快被回收",-1),a("p",null,"老年代：标记-清除-整理算法",-1),a("h4",{id:"内存碎片以及解决方式",tabindex:"-1"},[l("内存碎片以及解决方式 "),a("a",{class:"header-anchor",href:"#内存碎片以及解决方式","aria-label":'Permalink to "内存碎片以及解决方式"'},"​")],-1),a("p",null,"垃圾回收后，不进行整理，就会出现内存碎片。会导致无法分配大块的内存空间",-1),a("h3",{id:"_3、对象可以被回收的条件",tabindex:"-1"},[l("3、对象可以被回收的条件 "),a("a",{class:"header-anchor",href:"#_3、对象可以被回收的条件","aria-label":'Permalink to "3、对象可以被回收的条件"'},"​")],-1),a("p",null,"是否可以被回收是由垃圾回收器来决定的",-1),a("h4",{id:"引用可达性",tabindex:"-1"},[l("引用可达性 "),a("a",{class:"header-anchor",href:"#引用可达性","aria-label":'Permalink to "引用可达性"'},"​")],-1),a("p",null,"当一个对象不再被任何活动线程所引用时，被认为是不可达的",-1),a("h4",{id:"finalize方法状态",tabindex:"-1"},[l("finalize方法状态 "),a("a",{class:"header-anchor",href:"#finalize方法状态","aria-label":'Permalink to "finalize方法状态"'},"​")],-1),a("p",null,"如果一个对象的finalize()方法被调用并且执行完成，那么该对象是可以被回收的",-1),a("h4",{id:"被标记为垃圾的对象一定会被回收吗",tabindex:"-1"},[l("被标记为垃圾的对象一定会被回收吗 "),a("a",{class:"header-anchor",href:"#被标记为垃圾的对象一定会被回收吗","aria-label":'Permalink to "被标记为垃圾的对象一定会被回收吗"'},"​")],-1),a("p",null,"第一次标记：在可达性分析后发现没有与GC Roots相连接的引用链，会被第一次标记。",-1),a("p",null,"第二次标记：是否有必要执行finalize() ⽅法，如果没有与新的引用链建立关联关系，则会被进行第二次标记。如果与引用链建立了关联关系，那么将会逃离本次回收，继续存活。",-1),a("h3",{id:"_4、gc-root对象",tabindex:"-1"},[l("4、GC ROOT对象 "),a("a",{class:"header-anchor",href:"#_4、gc-root对象","aria-label":'Permalink to "4、GC ROOT对象"'},"​")],-1),a("p",null,"GC ROOT对象是指那些被认为是存活对象的根结点。垃圾回收器通过从这些根结点出发，遍历对象引用链，判断哪些对象是可达的，哪些是不可达的",-1),a("p",null,"常见的GC ROOT对象：",-1),a("p",null,"方法区中的类静态属性：存储在方法区中，随着类的加载而被创建，并且在整个程序的生命周期内存在",-1),a("p",null,"方法区中的常量引用：常量池中存储着常量的引用，包括字符串常量、类名、方法名等",-1),a("p",null,"活动线程的本地变量和调用栈",-1),a("p",null,"JNI引用",-1),a("h3",{id:"_5、jvm调优",tabindex:"-1"},[l("5、JVM调优 "),a("a",{class:"header-anchor",href:"#_5、jvm调优","aria-label":'Permalink to "5、JVM调优"'},"​")],-1),a("h4",{id:"性能测试和压测",tabindex:"-1"},[l("性能测试和压测 "),a("a",{class:"header-anchor",href:"#性能测试和压测","aria-label":'Permalink to "性能测试和压测"'},"​")],-1),a("p",null,"模拟真实场景下的负载情况，发现潜在的性能问题和瓶颈",-1),a("h4",{id:"代码优化",tabindex:"-1"},[l("代码优化 "),a("a",{class:"header-anchor",href:"#代码优化","aria-label":'Permalink to "代码优化"'},"​")],-1),a("p",null,"优化代码逻辑和算法，减少资源消耗和性能瓶颈。避免频繁的对象创建和销毁，合理使用缓存和数据结构，减少不必要的IO操作",-1),a("h4",{id:"线程调优",tabindex:"-1"},[l("线程调优 "),a("a",{class:"header-anchor",href:"#线程调优","aria-label":'Permalink to "线程调优"'},"​")],-1),a("p",null,"合理管理线程资源，避免线程过多或线程阻塞导致的性能问题",-1),a("h4",{id:"内存调优",tabindex:"-1"},[l("内存调优 "),a("a",{class:"header-anchor",href:"#内存调优","aria-label":'Permalink to "内存调优"'},"​")],-1),a("p",null,"合理设置堆内存大小、新生代和老年代的比例，选择适当的垃圾回收器和相关参数配置，可以有效提升应用的性能和稳定性",-1),a("h4",{id:"垃圾回收调优",tabindex:"-1"},[l("垃圾回收调优 "),a("a",{class:"header-anchor",href:"#垃圾回收调优","aria-label":'Permalink to "垃圾回收调优"'},"​")],-1),a("p",null,"选择合适的垃圾回收算法",-1),a("h3",{id:"_6、排查cpu飙升的问题",tabindex:"-1"},[l("6、排查CPU飙升的问题 "),a("a",{class:"header-anchor",href:"#_6、排查cpu飙升的问题","aria-label":'Permalink to "6、排查CPU飙升的问题"'},"​")],-1),a("h4",{id:"可能原因",tabindex:"-1"},[l("可能原因 "),a("a",{class:"header-anchor",href:"#可能原因","aria-label":'Permalink to "可能原因"'},"​")],-1),a("p",null,"1、CPU上下文切换过多",-1),a("p",null,"线程过多，CPU通过上下文切换来执行不同的线程，大量占用CPU资源",-1),a("p",null,"文件IO、网络IO导致线程阻塞",-1),a("p",null,"2、CPU资源过度消耗",-1),a("p",null,"有线程占据CPU资源，无法被释放",-1),a("p",null,"可以通过top命令，再通过shift+H找到进程中CPU消耗过高的线程",-1),a("p",null,"也可能是用户访问量突然增大导致的，可以增加系统资源",-1),a("h4",{id:"排查问题-jvm",tabindex:"-1"},[l("排查问题（JVM） "),a("a",{class:"header-anchor",href:"#排查问题-jvm","aria-label":'Permalink to "排查问题（JVM）"'},"​")],-1),a("p",null,"1、正常运行的系统",-1),a("p",null,"jmap 查看各个区域内存使用情况 jstack 线程运行情况 jstat 垃圾回收情况 fullgc 比较频繁就需要调优 是否回收了很多对象",-1),a("p",null,"最好在younggc直接回收 找到占用cpu最多的线程 top命令 shift+H找到CPU消耗过高的线程 ​",-1),a("p",null,"2、已经发生OOM的系统",-1),a("p",null,"查看发生OOM时，生成当时的dump文件",-1),a("p",null,"找到异常的实例对象、异常的线程，进行详细的分析和调试",-1),a("h3",{id:"_7、内存泄漏",tabindex:"-1"},[l("7、内存泄漏 "),a("a",{class:"header-anchor",href:"#_7、内存泄漏","aria-label":'Permalink to "7、内存泄漏"'},"​")],-1),a("h4",{id:"内存泄漏对象的特点",tabindex:"-1"},[l("内存泄漏对象的特点 "),a("a",{class:"header-anchor",href:"#内存泄漏对象的特点","aria-label":'Permalink to "内存泄漏对象的特点"'},"​")],-1),a("p",null,"可达的、无用的，这些对象就可以判定为java中的内存泄漏，这些对象不会被gc回收，但是占用内存",-1),a("h4",{id:"情况",tabindex:"-1"},[l("情况 "),a("a",{class:"header-anchor",href:"#情况","aria-label":'Permalink to "情况"'},"​")],-1),a("h4",{id:"避免内存泄露的方法",tabindex:"-1"},[l("避免内存泄露的方法 "),a("a",{class:"header-anchor",href:"#避免内存泄露的方法","aria-label":'Permalink to "避免内存泄露的方法"'},"​")],-1),a("p",null,"1、尽量不要使用static成员变量，减少生命周期",-1),a("p",null,"2、及时关闭资源",-1),a("p",null,"3、不用的对象，可以手动设置为null",-1),a("h3",{id:"_8、方法执行过程",tabindex:"-1"},[l("8、方法执行过程 "),a("a",{class:"header-anchor",href:"#_8、方法执行过程","aria-label":'Permalink to "8、方法执行过程"'},"​")],-1),a("p",null,"方法没有被调用时，在方法区中的字节码文件存放",-1),a("p",null,"方法被调用时，需要进入到栈内存中运行",-1),a("p",null,"方法区：字节码文件加载时进入到内存 源文件有什么、字节码就有什么",-1),a("p",null,"栈内存：方法运行的时候进入的内存",-1),a("h4",{id:"debug执行过程",tabindex:"-1"},[l("debug执行过程 "),a("a",{class:"header-anchor",href:"#debug执行过程","aria-label":'Permalink to "debug执行过程"'},"​")],-1),a("p",null,"源文件编译成字节码文件，进入方法区，当方法被虚拟机调用执行，进入栈内存",-1),a("h3",{id:"_9、jvm主要组成部分及其作用",tabindex:"-1"},[l("9、JVM主要组成部分及其作用 "),a("a",{class:"header-anchor",href:"#_9、jvm主要组成部分及其作用","aria-label":'Permalink to "9、JVM主要组成部分及其作用"'},"​")],-1),a("p",null,"1、类加载器",-1),a("p",null,"2、运行时数据区",-1),a("p",null,"3、执行引擎",-1),a("p",null,"4、本地库接口",-1),a("p",null,"⾸先通过类加载器（ClassLoader）会把 Java 代码转换成字节码，运⾏时数据区（Runtime Data Area）再把字节码加载到内存中，⽽字节码⽂件只是 JVM 的⼀套指令集规范，并不能直接交给底层操作系统去执⾏，因此需要特定的命令解析器执⾏引擎（Execution Engine），将字节码翻译成底层系统指令，再交由 CPU 去执⾏，⽽这个过程中需要调⽤其他语⾔的本地库接⼝（Native Interface）来实现整个程序的功能。",-1),a("h3",{id:"_10、类加载机制",tabindex:"-1"},[l("10、类加载机制 "),a("a",{class:"header-anchor",href:"#_10、类加载机制","aria-label":'Permalink to "10、类加载机制"'},"​")],-1),a("h4",{id:"类加载器及作用",tabindex:"-1"},[l("类加载器及作用 "),a("a",{class:"header-anchor",href:"#类加载器及作用","aria-label":'Permalink to "类加载器及作用"'},"​")],-1),a("p",null,"BootstrapClassLoader 是ExtClassLoader的父加载器",-1),a("p",null,"ExtClassLoader 是AppClassLoader的父加载器",-1),a("p",null,"AppClassLoader",-1),a("h4",{id:"双亲委派机制、类加载过程",tabindex:"-1"},[l("双亲委派机制、类加载过程 "),a("a",{class:"header-anchor",href:"#双亲委派机制、类加载过程","aria-label":'Permalink to "双亲委派机制、类加载过程"'},"​")],-1),a("p",null,"JVM加载类的时候，会委派给Ext和Bootstrarp进行加载，没加载到才由自己加载",-1),a("p",null,"调用AppclassLoader的loadClass方法加载这个类，先调用ExtClassLoader的loadClass方法加载类，先调用BootstrapClassLoader的loadClass方法加载类，没加载到的话，ExtClassLoader先自己尝试加载，然后AppClassLoader自己加载",-1),a("h3",{id:"_11、指令重排",tabindex:"-1"},[l("11、指令重排 "),a("a",{class:"header-anchor",href:"#_11、指令重排","aria-label":'Permalink to "11、指令重排"'},"​")],-1),a("p",null,"在编译java代码时，为了优化执行效率，可能会改变指令的执行顺序，导致程序执行的结果与预期不一致。",-1),a("p",null,"解决指令重排的方法：",-1),a("p",null,"1、volatile关键字：保证线程对当前变量的操作是有序的",-1),a("p",null,"2、synchronized关键字：保证线程之间的可见性和互斥性，确保执行顺序的一致性。可以防止多线程访问同一段代码的并行执行，从而避免了由指令重排引起的问题",-1),a("p",null,"3、线程局部变量：它不会被多个线程共享，也就不会存在指令重排的问题 threadlocal",-1),a("h3",{id:"_12、g1收集器",tabindex:"-1"},[l("12、G1收集器 "),a("a",{class:"header-anchor",href:"#_12、g1收集器","aria-label":'Permalink to "12、G1收集器"'},"​")],-1),a("h4",{id:"垃圾回收的瓶颈",tabindex:"-1"},[l("垃圾回收的瓶颈： "),a("a",{class:"header-anchor",href:"#垃圾回收的瓶颈","aria-label":'Permalink to "垃圾回收的瓶颈："'},"​")],-1),a("p",null,"传统垃圾算法无法解决Full GC所带来的应用暂停，在一些对实时性要求高的应用场景，GC暂停带来的请求堆积和失败是无法接受的。",-1),a("p",null,"G1不同于传统的垃圾回收器，将整个堆内存作为一个整体，将堆内存分成多个大小相等的区域。根据堆内存的使用情况，动态选择一些包含垃圾对象比较多的区域进行回收。",-1),a("h3",{id:"_13、fullgc原理",tabindex:"-1"},[l("13、fullgc原理 "),a("a",{class:"header-anchor",href:"#_13、fullgc原理","aria-label":'Permalink to "13、fullgc原理"'},"​")],-1),a("p",null,"停止应用程序，对jvm中所有的内存进行垃圾回收的过程",-1),a("h4",{id:"触发条件",tabindex:"-1"},[l("触发条件 "),a("a",{class:"header-anchor",href:"#触发条件","aria-label":'Permalink to "触发条件"'},"​")],-1),a("p",null,"堆内存空间不足、显式调用、老年代空间不足、",-1),a("h4",{id:"工作过程",tabindex:"-1"},[l("工作过程 "),a("a",{class:"header-anchor",href:"#工作过程","aria-label":'Permalink to "工作过程"'},"​")],-1),a("p",null,"标记阶段，从根对象出发，递归标记所有可达对象，并将它们标记为活动对象",-1),a("p",null,"确认标记的一致性。然后将所有未标记的对象清除，并回收内存空间",-1),a("p",null,"整理压缩，将存活的对象向一端移动",-1),a("h4",{id:"频繁full-gc如何处理",tabindex:"-1"},[l("频繁full gc如何处理 "),a("a",{class:"header-anchor",href:"#频繁full-gc如何处理","aria-label":'Permalink to "频繁full gc如何处理"'},"​")],-1),a("p",null,"增加堆内存的大小：-Xms -Xmx",-1),a("p",null,"检查内存泄漏：使用内存分析工具进行分析",-1),a("p",null,"调整垃圾回收参数：调整年轻代和老年代的分配比例",-1)])),"main-header":e(()=>[n(r.$slots,"main-header")]),"main-header-after":e(()=>[n(r.$slots,"main-header-after")]),"main-nav":e(()=>[n(r.$slots,"main-nav")]),"main-content-before":e(()=>[n(r.$slots,"main-content-before")]),"main-content":e(()=>[n(r.$slots,"main-content")]),"main-content-after":e(()=>[n(r.$slots,"main-content-after")]),"main-nav-before":e(()=>[n(r.$slots,"main-nav-before")]),"main-nav-after":e(()=>[n(r.$slots,"main-nav-after")]),comment:e(()=>[n(r.$slots,"comment")]),footer:e(()=>[n(r.$slots,"footer")]),aside:e(()=>[n(r.$slots,"aside")]),"aside-custom":e(()=>[n(r.$slots,"aside-custom")]),default:e(()=>[n(r.$slots,"default")]),_:3},8,["frontmatter"])}}};export{E as default,_ as usePageData};
